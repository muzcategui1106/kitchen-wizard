---
apiVersion: v1
kind: Namespace
metadata:
  name: dex
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: dex
  name: dex
  namespace: dex
spec:
  replicas: 3
  selector:
    matchLabels:
      app: dex
  template:
    metadata:
      labels:
        app: dex
    spec:
      serviceAccountName: dex # This is created below
      containers:
      - image: ghcr.io/dexidp/dex:v2.36.0
        name: dex
        command: ["/usr/local/bin/dex", "serve", "/etc/dex/cfg/config.yaml"]

        env:
        - name: LINKEDIN_APPLICATION_ID
          value: 7869lp0zsijyab
        
        - name: LINKEDIN_CLIENT_SECRET
          value: 4EFFp0iNGGBvftMh

        ports:
        - name: https
          containerPort: 5556

        volumeMounts:
        - name: config
          mountPath: /etc/dex/cfg
        - name: tls
          mountPath: /etc/dex/tls

        readinessProbe:
          httpGet:
            path: /healthz
            port: 5556
            scheme: HTTPS
      volumes:
      - name: config
        configMap:
          name: dex
          items:
          - key: config.yaml
            path: config.yaml
      - name: tls
        secret:
          secretName: dex-tls
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: dex
  namespace: dex
data:
  config.yaml: |
    issuer: https://{{ .Values.dexURL }}
    storage:
      type: kubernetes
      config:
        inCluster: true
    web:
      https: 0.0.0.0:5556
      tlsCert: /etc/dex/tls/tls.crt
      tlsKey: /etc/dex/tls/tls.key
      allowedOrigins: ["*"]

    connectors:
      - type: linkedin
        # Required field for connector id.
        id: linkedin
        # Required field for connector name.
        name: LinkedIn
        config:
          # Credentials can be string literals or pulled from the environment.
          clientID: $LINKEDIN_APPLICATION_ID
          clientSecret: $LINKEDIN_CLIENT_SECRET
          redirectURI: https://dex.dex.local.uzcatm-skylab.com/callback

    staticClients:
    - id: example-app
      redirectURIs:
      - 'http://api.kitchen-wizard.local.uzcatm-skylab.com/auth/v1/oidc/callback'
      - 'http://localhost:8443/auth/v1/oidc/callback'
      name: 'Example App'
      secret: ZXhhbXBsZS1hcHAtc2VjcmV0

    enablePasswordDB: true
    staticPasswords:
    - email: "admin@example.com"
      # bcrypt hash of the string "password": $(echo password | htpasswd -BinC 10 admin | cut -d: -f2)
      hash: "$2a$10$2b2cU8CPhOTaGrs1HRQuAueS7JTT5ZHsHSzYiFPm1leZck7Mc8T4W"
      username: "admin"
      userID: "08a8684b-db88-4b73-90a9-3cd1661f5466"
    - email: "admin2@example.com"
      # password is macaco
      hash: "$2y$10$RONEmq0HNAJN9X2rwkZqAO/plaVPQJ1LEsH9w5GIJr2D2Cjr5jpUK"
      username: "uzcatm"
---
apiVersion: v1
kind: Service
metadata:
  name: dex
  namespace: dex
spec:
  type: ClusterIP
  ports:
  - name: dex
    port: 5556
    protocol: TCP
    targetPort: 5556
  selector:
    app: dex
---
kind: Certificate
apiVersion: cert-manager.io/v1
metadata:
  name: dex
  namespace: dex
spec:
  secretName: dex-tls
  commonName: {{ .Values.dexURL }}
  dnsNames:
  - {{ .Values.dexURL }}
  issuerRef:
    name: pki
    # We can reference ClusterIssuers by changing the kind here.
    # The default value is Issuer (i.e. a locally namespaced Issuer)
    kind: ClusterIssuer
    group: cert-manager.io
---
apiVersion: projectcontour.io/v1
kind: HTTPProxy
metadata:
  name: dex
  namespace: dex
  annotations:
    kubernetes.io/ingress.class: contour
spec:
  virtualhost:
    fqdn: {{ .Values.dexURL }}
    tls:
      passthrough: true
  tcpproxy:
    services:
    - name: dex
      port: 5556
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: dex
  name: dex
  namespace: dex
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: dex
rules:
- apiGroups: ["dex.coreos.com"] # API group created by dex
  resources: ["*"]
  verbs: ["*"]
- apiGroups: ["apiextensions.k8s.io"]
  resources: ["customresourcedefinitions"]
  verbs: ["create"] # To manage its own resources, dex must be able to create customresourcedefinitions
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: dex
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: dex
subjects:
- kind: ServiceAccount
  name: dex           # Service account assigned to the dex pod, created above
  namespace: dex  # The namespace dex is running in
---
{{ if .Values.isLocal }}
# having this secret for local development is ok because there is nothing really private about the certificate which is for a development domain only
apiVersion: v1
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUZSakNDQkM2Z0F3SUJBZ0lTQTFScFJxTm5LaU5pblZHOEtFZCtrdjVoTUEwR0NTcUdTSWIzRFFFQkN3VUEKTURJeEN6QUpCZ05WQkFZVEFsVlRNUll3RkFZRFZRUUtFdzFNWlhRbmN5QkZibU55ZVhCME1Rc3dDUVlEVlFRRApFd0pTTXpBZUZ3MHlNekF5TWpjeU1EQXhNRFZhRncweU16QTFNamd5TURBeE1EUmFNQ294S0RBbUJnTlZCQU1UCkgyUmxlQzVrWlhndWJHOWpZV3d1ZFhwallYUnRMWE5yZVd4aFlpNWpiMjB3Z2dFaU1BMEdDU3FHU0liM0RRRUIKQVFVQUE0SUJEd0F3Z2dFS0FvSUJBUUNsL1JHZ3c5WTdFSHhkeEpNV2IyeVlNakdhN0FQOTRPUDZhQzFVY0RBRgo5anRXcFMvODV6SU5wbE9GWHltcXRFbi9KaGhwbCtwRGxvYTdoS3plaFVPcUZGMlp5eExGUUlVVFlZODFZUVVoCjBPd0RoOUlEUC9NYXlDM29RczNkem9uajdkaXlXU204VWFGdlpJNkZSMWdweDVtMko4YjhOcGpLMG9wcEJMZWYKSlpJVmN6S1UrajVsMHU2SGFZc09HRHZFVlVWVndGbWpEWEk1RWFUUFJINlA5cGRwblFhLzAzU3JOdWlLajdkaQpkRlc5R2x6Zm84c2dpN0wvK3NlUFR2STk5NUF4VWhIbm9xVjZ0K2kvNjRnYTh6SmV5VW44aWZtcTY4WmZDd0tGCnA5a0pQTENIS284bjN1L2NYQy9rb1FDQTJPbnlNR0dBVSsrZGFpU1VoS0xmQWdNQkFBR2pnZ0pjTUlJQ1dEQU8KQmdOVkhROEJBZjhFQkFNQ0JhQXdIUVlEVlIwbEJCWXdGQVlJS3dZQkJRVUhBd0VHQ0NzR0FRVUZCd01DTUF3RwpBMVVkRXdFQi93UUNNQUF3SFFZRFZSME9CQllFRk8xbldKQlgrVFpOTHNoQk4wbzUwOHEvMWdKWU1COEdBMVVkCkl3UVlNQmFBRkJRdXN4ZTNXRmJMcmxBSlFPWWZyNTJMRk1MR01GVUdDQ3NHQVFVRkJ3RUJCRWt3UnpBaEJnZ3IKQmdFRkJRY3dBWVlWYUhSMGNEb3ZMM0l6TG04dWJHVnVZM0l1YjNKbk1DSUdDQ3NHQVFVRkJ6QUNoaFpvZEhSdwpPaTh2Y2pNdWFTNXNaVzVqY2k1dmNtY3ZNQ29HQTFVZEVRUWpNQ0dDSDJSbGVDNWtaWGd1Ykc5allXd3VkWHBqCllYUnRMWE5yZVd4aFlpNWpiMjB3VEFZRFZSMGdCRVV3UXpBSUJnWm5nUXdCQWdFd053WUxLd1lCQkFHQzN4TUIKQVFFd0tEQW1CZ2dyQmdFRkJRY0NBUllhYUhSMGNEb3ZMMk53Y3k1c1pYUnpaVzVqY25sd2RDNXZjbWN3Z2dFRwpCZ29yQmdFRUFkWjVBZ1FDQklIM0JJSDBBUElBZHdDM1B2c2szNXhOdW5YeU9jVzZXUFJzWGZ4Q3ozcWZOY1NlCkhRbUJKZTIwbVFBQUFZYVVyZFRiQUFBRUF3QklNRVlDSVFDL0taWCtGSmNZL2VuUXpBRmowR3hCTEVQNDZIeXoKLytQUFZuM3piUVdOcndJaEFKeWM3UEJvK0JCUnhnVW5ZaUpFb1pyV0RoSHg1end1NFIveDZHUHpzbDhnQUhjQQplaktNVk5pM0xiWWc2ampnVWg3cGhCWndNaE9GVFR2U0s4RTZWNk5TNjFJQUFBR0dsSzNVNkFBQUJBTUFTREJHCkFpRUExQzBPSjU1RzkvK1NaamRxNlN0cStnekh0eHpPM1R1eEViRk5oNGlET2NzQ0lRQ1pXWVNpRVorUXd1MkYKdS9iSVNTYVNySzVGUEFHZWZuNmtxSkFQS0lhOWtUQU5CZ2txaGtpRzl3MEJBUXNGQUFPQ0FRRUFtWDh3ZFZrdApadm1HMGhRZjgwbG5PV3JHa0taSEpsUkpxM0YrTzZUbGZiQ1I5NEZrZUNuMkcxU2NIQWJ0VUVsRlY2SDdSQUVrCk9YL0kxVmw2SG1abGpHWEJnMUVtb01qc1FLbjBpT3lBbFc0UldkZi9jU1J6MlZuU1M5Zlc3UXdzelFrMXFKVzQKY3FQSSsvTFQxYyt6eXh0aUFiQUZPWmd2aGFnL3AwZEtsVU13aDVkUWJvNVpQOFFtcVJsK1l1eHdQUkI3R1R0cwpuSXFyYUJ5eVE4a2Q1M054Z25RRVJuYStkREtvOEl6alRTdDFxdkxFTVdwUUhkMEtBWWEvQm92VUNBbDZlemlnCkpzaVNzWXRXSlU1QnVwREpRSVVEa2FGRVlzU0djdTE0Ri9Ec2ZFbFhBN2lnTEQxcnk1TUlkdHl4blFLV0ppVTQKSkUvZnV5dy9mV2tQbGc9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCi0tLS0tQkVHSU4gQ0VSVElGSUNBVEUtLS0tLQpNSUlGRmpDQ0F2NmdBd0lCQWdJUkFKRXJDRXJQREJpblUvYldMaVduWDFvd0RRWUpLb1pJaHZjTkFRRUxCUUF3ClR6RUxNQWtHQTFVRUJoTUNWVk14S1RBbkJnTlZCQW9USUVsdWRHVnlibVYwSUZObFkzVnlhWFI1SUZKbGMyVmgKY21Ob0lFZHliM1Z3TVJVd0V3WURWUVFERXd4SlUxSkhJRkp2YjNRZ1dERXdIaGNOTWpBd09UQTBNREF3TURBdwpXaGNOTWpVd09URTFNVFl3TURBd1dqQXlNUXN3Q1FZRFZRUUdFd0pWVXpFV01CUUdBMVVFQ2hNTlRHVjBKM01nClJXNWpjbmx3ZERFTE1Ba0dBMVVFQXhNQ1VqTXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCRHdBd2dnRUsKQW9JQkFRQzdBaFVvelBhZ2xOTVBFdXlOVlpMRCtJTHhtYVo2UW9pblhTYXF0U3U1eFV5eHI0NXIrWFhJbzljUApSNVFVVlRWWGpKNm9vamtaOVlJOFFxbE9idlU3d3k3YmpjQ3dYUE5aT09mdHoybndXZ3NidnNDVUpDV0gramR4CnN4UG5IS3pobSsvYjVEdEZVa1dXcWNGVHpqVElVdTYxcnUyUDNtQnc0cVZVcTdadERwZWxRRFJySzlPOFp1dG0KTkh6NmE0dVBWeW1aK0RBWFhicHliL3VCeGEzU2hsZzlGOGZuQ2J2eEsvZUczTUhhY1YzVVJ1UE1yU1hCaUx4ZwpaM1Ztcy9FWTk2SmM1bFAvT29pMlI2WC9FeGpxbUFsM1A1MVQrYzhCNWZXbWNCY1VyMk9rLzVtems1M2NVNmNHCi9raUZIYUZwcmlWMXV4UE1VZ1AxN1ZHaGk5c1ZBZ01CQUFHamdnRUlNSUlCQkRBT0JnTlZIUThCQWY4RUJBTUMKQVlZd0hRWURWUjBsQkJZd0ZBWUlLd1lCQlFVSEF3SUdDQ3NHQVFVRkJ3TUJNQklHQTFVZEV3RUIvd1FJTUFZQgpBZjhDQVFBd0hRWURWUjBPQkJZRUZCUXVzeGUzV0ZiTHJsQUpRT1lmcjUyTEZNTEdNQjhHQTFVZEl3UVlNQmFBCkZIbTBXZVo3dHVYa0FYT0FDSWpJR2xqMjZadHVNRElHQ0NzR0FRVUZCd0VCQkNZd0pEQWlCZ2dyQmdFRkJRY3cKQW9ZV2FIUjBjRG92TDNneExta3ViR1Z1WTNJdWIzSm5MekFuQmdOVkhSOEVJREFlTUJ5Z0dxQVloaFpvZEhSdwpPaTh2ZURFdVl5NXNaVzVqY2k1dmNtY3ZNQ0lHQTFVZElBUWJNQmt3Q0FZR1o0RU1BUUlCTUEwR0N5c0dBUVFCCmd0OFRBUUVCTUEwR0NTcUdTSWIzRFFFQkN3VUFBNElDQVFDRnlrNUhQcVAzaFVTRnZOVm5lTEtZWTYxMVRSNlcKUFRObGNsUXRnYURxdyszNElMOWZ6TGR3QUxkdU8vWmVsTjdrSUorbTc0dXlBK2VpdFJZOGtjNjA3VGtDNTN3bAppa2ZtWlc0L1J2VFo4TTZVSys1VXpoSzhqQ2RMdU1HWUw2S3Z6WEdSU2dpM3lMZ2pld1F0Q1BrSVZ6NkQyUVF6CkNrY2hlQW1DSjhNcXlKdTV6bHp5Wk1qQXZubkFUNDV0UkF4ZWtyc3U5NHNRNGVnZFJDbmJXU0R0WTdraCtCSW0KbEpOWG9CMWxCTUVLSXE0UURVT1hvUmdmZnVEZ2hqZTFXckc5TUwrSGJpc3EveUZPR3dYRDlSaVg4RjZzdzZXNAphdkF1dkRzenVlNUwzc3o4NUsrRUM0WS93RlZETnZabzRUWVhhbzZaMGYrbFFLYzB0OERRWXprMU9YVnU4cnAyCnlKTUM2YWxMYkJmT0RBTFp2WUg3bjdkbzFBWmxzNEk5ZDFQNGpua0RyUW94QjNVcVE5aFZsM0xFS1E3M3hGMU8KeUs1R2hERFg4b1ZmR0tGNXUrZGVjSXNINFlhVHc3bVAzR0Z4SlNxdjMrMGxVRkpvaTVMYzVkYTE0OXA5MElkcwpoQ0V4cm9MMSs3bXJ5SWtYUGVGTTVUZ085cjBydlphQkZPdlYyejBncDM1WjArTDRXUGxidUVqTi9seFBGaW4rCkhsVWpyOGdSc0kzcWZKT1FGeS85cktJSlIwWS84T213dC84b1RXZ3kxbWRlSG1tams3ajFuWXN2QzlKU1E2WnYKTWxkbFRUS0IzemhUaFYxK1hXWXA2cmpkNUpXMXpiVldFa0xOeEU3R0pUaEVVRzNzemdCVkdQN3BTV1RVVHNxWApuTFJid0hPb3E3aEh3Zz09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0KLS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUZZRENDQkVpZ0F3SUJBZ0lRUUFGM0lUZlU2VUs0N25hcVBHUUt0ekFOQmdrcWhraUc5dzBCQVFzRkFEQS8KTVNRd0lnWURWUVFLRXh0RWFXZHBkR0ZzSUZOcFoyNWhkSFZ5WlNCVWNuVnpkQ0JEYnk0eEZ6QVZCZ05WQkFNVApEa1JUVkNCU2IyOTBJRU5CSUZnek1CNFhEVEl4TURFeU1ERTVNVFF3TTFvWERUSTBNRGt6TURFNE1UUXdNMW93ClR6RUxNQWtHQTFVRUJoTUNWVk14S1RBbkJnTlZCQW9USUVsdWRHVnlibVYwSUZObFkzVnlhWFI1SUZKbGMyVmgKY21Ob0lFZHliM1Z3TVJVd0V3WURWUVFERXd4SlUxSkhJRkp2YjNRZ1dERXdnZ0lpTUEwR0NTcUdTSWIzRFFFQgpBUVVBQTRJQ0R3QXdnZ0lLQW9JQ0FRQ3Q2Q1J6OUJRMzg1dWVLMWNvSEllKzNMZmZPSkNNYmp6bVY2QjQ5M1hDCm92NzFhbTcyQUU4bzI5NW9obXhFazdheFkvMFVFbXUvSDlMcU1ac2hmdEV6UExwSTlkMTUzN080L3hMeElacEwKd1lxR2NXbEtabVpzajM0OGNMK3RLU0lHOCtUQTVvQ3U0a3VQdDVsK2xBT2YwMGVYZkpsSUkxUG9PSzVQQ20rRApMdEZKVjR5QWRMYmFMOUE0alhzRGNDRWJkZkl3UFBxUHJ0M2FZNnZyRmsvQ2poRkxmczhMNlArMWR5NzBzbnRLCjRFd1NKUXh3alFNcG9PRlRKT3dUMmU0WnZ4Q3pTb3cvaWFOaFVkNnNod2VVOUdOeDdDN2liMXVZZ2VHSlhEUjUKYkhidk81QmllZWJicEpvdkpzWFFFT0VPM3RrUWpoYjd0L2VvOThmbEFnZVlqellJbGVmaU41WU5ObldlK3c1eQpzUjJidkFQNVNRWFlnZDBGdENyV1FlbXNBWGFWQ2cvWTM5VzlFaDgxTHlnWGJOS1l3YWdKWkhkdVJ6ZTZ6cXhaClhtaWRmM0xXaWNVR1FTaytXVDdkSnZVa3lSR25XcU5NUUI5R29abTFwenBSYm9ZN25uMXlweElGZUZudFBsRjQKRlFzRGo0M1FMd1d5UG50S0hFdHpCUkw4eHVyZ1VCTjhRNU4wczhwMDU0NGZBUWpRTU5SYmNUYTBCN3JCTURCYwpTTGVDTzVpbWZXQ0tvcU1wZ3N5NnZZTUVHNktEQTBHaDFnWHhHOEsyOEtoOGhqdEdxRWdxaU54Mm1uYS9IMnFsClBSbVA2emp6Wk43SUt3MEtLUC8zMitJVlF0UWkwQ2RkNFhuK0dPZHdpSzFPNXRtTE9zYmRKMUZ1Lzd4azlUTkQKVHdJREFRQUJvNElCUmpDQ0FVSXdEd1lEVlIwVEFRSC9CQVV3QXdFQi96QU9CZ05WSFE4QkFmOEVCQU1DQVFZdwpTd1lJS3dZQkJRVUhBUUVFUHpBOU1Ec0dDQ3NHQVFVRkJ6QUNoaTlvZEhSd09pOHZZWEJ3Y3k1cFpHVnVkSEoxCmMzUXVZMjl0TDNKdmIzUnpMMlJ6ZEhKdmIzUmpZWGd6TG5BM1l6QWZCZ05WSFNNRUdEQVdnQlRFcDdHa2V5eHgKK3R2aFM1QjEvOFFWWUlXSkVEQlVCZ05WSFNBRVRUQkxNQWdHQm1lQkRBRUNBVEEvQmdzckJnRUVBWUxmRXdFQgpBVEF3TUM0R0NDc0dBUVVGQndJQkZpSm9kSFJ3T2k4dlkzQnpMbkp2YjNRdGVERXViR1YwYzJWdVkzSjVjSFF1CmIzSm5NRHdHQTFVZEh3UTFNRE13TWFBdm9DMkdLMmgwZEhBNkx5OWpjbXd1YVdSbGJuUnlkWE4wTG1OdmJTOUUKVTFSU1QwOVVRMEZZTTBOU1RDNWpjbXd3SFFZRFZSME9CQllFRkhtMFdlWjd0dVhrQVhPQUNJaklHbGoyNlp0dQpNQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUJBUUFLY3dCc2xtNy9EbExRcnQyTTUxb0dyUytvNDQrL3lRb0RGVkRDCjVXeEN1MitiOUxSUHdrU0lDSFhNNndlYkZHSnVlTjdzSjdvNVhQV2lvVzVXbEhBUVU3Rzc1Sy9Rb3NNckFkU1cKOU1VZ05UUDUyR0UyNEhHTnRMaTFxb0pGbGNEeXFTTW81OWFoeTJjSTJxQkRMS29ia3gvSjN2V3JhVjBUOVZ1RwpXQ0xLVFZYa2NHZHR3bGZGUmpsQno0cFlnMWh0bWY1WDZEWU84QTRqcXYySWw5RGpYQTZVU2JXMUZ6WFNMcjlPCmhlOFk0SVdTNndZN2JDa2pDV0RjUlFKTUVoZzc2ZnNPM3R4RStGaVlydXE5UlVXaGlGMW15djRRNlcrQ3lCRkMKRGZ2cDdPT0dBTjZkRU9NNCtxUjlzZGpvU1lLRUJwc3I2R3RQQVF3NGR5NzUzZWM1Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBcGYwUm9NUFdPeEI4WGNTVEZtOXNtREl4bXV3RC9lRGorbWd0VkhBd0JmWTdWcVV2Ci9PY3lEYVpUaFY4cHFyUkoveVlZYVpmcVE1YUd1NFNzM29WRHFoUmRtY3NTeFVDRkUyR1BOV0VGSWREc0E0ZlMKQXovekdzZ3Q2RUxOM2M2SjQrM1lzbGtwdkZHaGIyU09oVWRZS2NlWnRpZkcvRGFZeXRLS2FRUzNueVdTRlhNeQpsUG8rWmRMdWgybUxEaGc3eEZWRlZjQlpvdzF5T1JHa3owUitqL2FYYVowR3Y5TjBxemJvaW8rM1luUlZ2UnBjCjM2UExJSXV5Ly9ySGowN3lQZmVRTVZJUjU2S2xlcmZvdit1SUd2TXlYc2xKL0luNXF1dkdYd3NDaGFmWkNUeXcKaHlxUEo5N3YzRnd2NUtFQWdOanA4akJoZ0ZQdm5Xb2tsSVNpM3dJREFRQUJBb0lCQUN6dVQvTkFqNkQxV1hUWQpYU2haaVArNXRvdkZEMStObktpUHdwVjB1TXNrVi9PZ1Mxa2VEQUo5MzJYZTJKeUlxTzhVRk0rZ2U1MUlCYmlFCnRYYVdoRFpweE54NGgrQTFFdENvTytlckY0U0wxUmN2a0wyb2RkbnVEZDh0RmlUUVg2ci9Hd1ZMOVd3d2ZJNTIKbmMyZC9sTnc0RDdhalphQUFPUUdFY2xUcVpDK1h5WnZrT285OThXa2U2NVEvOERRNWJJMkJYTmtxeTFCaXp3TgpyTjRFSFF4dTNRMnB2QWVEcGhOVWtWdTVERFZEUVU1ZVEraFlnby9jZ2M0R3E2aWFXVGp3Qk9GbHBiR1V3cytQCkdIblZYZFp0Qk85ZkNmZ3I0WXpkSFBIZ1pYcGZPVDZFaWYxK3lRWnAwaEViaDkvSUF0R2pJTytickZsN3JDdGIKVUlEQlV1RUNnWUVBeVJMNllCczE5RjM1SDNZMDZEd200NDZjaDFPcGU0eE5ybWxaeEJEd0diUkxuUVFEcXlHQgovZHI2YWVYVkMrTkNwRW4ycHYzVzZGRlozUXlFWUZPeDVOc0wrcy9sSWFjRjdOZjlpY1MxOERVRC94VTRueG8yCmFWLzMxVE16YlYrK25PejdxMjdCVUF2V2V5bi9JMkh5T1k4Vm5Zb1lSc0RNQnRvQWJEbk92RFVDZ1lFQTAxU1MKZGR6RytSdnZRemozZWxTUFM1VGFTTEgvVmxyb3ZhdDBqMXZsKytrUGtUZjFPbG9uQTlnNHU1Z3JMQ0NZSytudwpYTGgzQXFxNk5kbDYveXRkVE5WN1dDeVNwUDVBNFBxcmVtTGFSK1hIRjZId1dqTCsrYUE2Z3NNcjdMc3I5NzNhCkNReUNVY3RhZVFxWkxvVGd1amk3MEtyZTJCNlpqR3ZNSTZqbC9VTUNnWUJwZENXUnI5T3ROSGZLTTFGdUZ0WUMKZERITm0yZ0Fuc1hDMmdlMUYza0UwaFR4NVVBVFNVQ0dwWWk5YjBjN3M5V29tZzNjNkxZRUkxNHcyemExMms4cgpDbUtQQ09kUHJld2ltZWlqajJJbjkzWUFHdDRXTzBZY0g3TzN3ZUdQMUM0QTJSem9mTzZ2ajNYT0pHbGw0aUdLClpHdGVzeVVtUGtrQ3N1U1QzZ0Y1blFLQmdCdFVGWGlPYTJDdGZ4eG5Vb0dNUzllUFVVY1RWWnk2TnR6SVBsT0gKbzg4V3pYK1BCL1JhMGk3S0dGUVNFb3NyVCtKbDUwSm1UR1dZNUdtd1RScVFaZ2xZbGhISitkRENYR3Q3bnc4OQpsMUt5NFRNcUt1WFBNRy9oaTQ5N1k4UENWS1k5OCtNMXJlaWI3b0Eyb2FhRlluWlNmZDgzS1lnek5OSVc0cGc5CjhEZjNBb0dCQUxrR0VnaTFxbHJHT3laVHNkQy9BeEFObWN5eGVHOEN5K1BDbnlxeWxPZ21maE5lczZBTXY4Y0EKMFBLSnNVQWx5dG9ycCtzekxKNXBLZUlla1NEVnlVRkFuRG1jcHNjalVZWS9CZUVJd3laVXVWbG9WdlZzek9jSQpjeDRkOWFGamVGRW5IcE5KNFlyZnhyL2U4T3BIb1Jqb05ha2w5aFlwS2VPc3V5R1k3RlBiCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
kind: Secret
metadata:
  annotations:
    cert-manager.io/alt-names: dex.dex.local.uzcatm-skylab.com
    cert-manager.io/certificate-name: dex
    cert-manager.io/common-name: dex.dex.local.uzcatm-skylab.com
    cert-manager.io/ip-sans: ""
    cert-manager.io/issuer-group: cert-manager.io
    cert-manager.io/issuer-kind: ClusterIssuer
    cert-manager.io/issuer-name: pki
    cert-manager.io/uri-sans: ""
  labels:
    controller.cert-manager.io/fao: "true"
  name: dex-tls
  namespace: dex
type: kubernetes.io/tls
{{ end }}